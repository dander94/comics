from django.shortcuts import render,get_object_or_404

# Create your views here.

from .models import Location, Collection, Comic
from django.views import generic
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponseRedirect, HttpResponse
from django.core.urlresolvers import reverse
from .forms import CollectionForm,LocationForm, ComicForm
from django.contrib import messages
from rest_framework.renderers import JSONRenderer
from rest_framework.parsers import JSONParser
from .serializers import ComicSerializer

class JSONResponse(HttpResponse):
    """
    An HttpResponse that renders its content into JSON.
    """
    def __init__(self, data, **kwargs):
        content = JSONRenderer().render(data)
        kwargs['content_type'] = 'application/json'
        super(JSONResponse, self).__init__(content, **kwargs)

def index(request):
	
	return render(request,'comic/index.html')
	

def crear_localizacion(request):
	
	try:
		form = LocationForm(request.POST)
		nombre_nv = request.POST['nombre']
	except (KeyError):
		return render(request,'comic/index.html');
	else:
		if form.is_valid():
			localizacion=Location()
			localizacion.nombre=nombre_nv
			localizacion.save()
		else:
			messages.add_message(request, messages.ERROR, 'Rellene el formulario correctamente')
		return HttpResponseRedirect(reverse('comics:location',args=()));

def crear_coleccion(request):
	try:	
		form = CollectionForm(request.POST)
		nombre_nv = request.POST['nombre']
		num_nv = request.POST['numeros_totales']
	except (KeyError):
		return render(request,'comic/index.html');
	else:
		if form.is_valid():
			coleccion=Collection()
			coleccion.nombre=nombre_nv
			coleccion.numeros_totales=num_nv
			coleccion.save()
		else:
			messages.add_message(request, messages.ERROR, 'Rellene el formulario correctamente')
		return HttpResponseRedirect(reverse('comics:collection',args=()))


def crear_comic(request,pk):
	try:	
		form = ComicForm(request.POST)
		id_col = pk
		nombre_nv = request.POST['nombre']
		numero_nv= request.POST['numero_en_coleccion']
		loc_nv = request.POST['localizacion']
		print(loc_nv)
	except (KeyError):
		print("MEC");
		return render(request,'comic/collection.html');
	else:
		if form.is_valid():
			if Collection.objects.all().get(id=id_col).comic_set.count() != Collection.objects.all().get(id=id_col).numeros_totales:
				comic=Comic(nombre=nombre_nv,numero_en_coleccion=numero_nv)
				comic.coleccion_id=id_col;
				comic.localizacion_id=loc_nv
				comic.save()
			else:
				messages.add_message(request, messages.ERROR, 'La coleccion est√° completa')
		else:
			messages.add_message(request, messages.ERROR, 'Rellene el formulario correctamente')

	return HttpResponseRedirect(reverse('comics:col_detail',kwargs={'pk':pk}))
		

class LocationView(generic.ListView):
	template_name ='comic/location.html'
	context_object_name = 'location_list'
	form = LocationForm();
	def get_queryset(self):
		return Location.objects.order_by('nombre')
	def get_context_data(self, *args, **kwargs):
		context = super(LocationView,self).get_context_data( *args, **kwargs)
		context['form']=self.form;
		return context

class CollectionView(generic.ListView):
	template_name ='comic/collection.html'
	context_object_name = 'collection_list'
	form = CollectionForm();
	def get_queryset(self):
		return Collection.objects.order_by('nombre')
	def get_context_data(self, *args, **kwargs):
		context = super(CollectionView,self).get_context_data( *args, **kwargs)
		context['form']=self.form;
		return context

class CollectionDetailView(generic.DetailView):
	template_name ='comic/collection_detail.html'
	form = ComicForm();
	model=Collection
	
	def get_context_data(self, *args, **kwargs):
		context = super(CollectionDetailView,self).get_context_data( *args, **kwargs)
		context['form']=self.form;
		return context
	
@csrf_exempt
def comic_list(request):
	if request.method=='GET':
		comics = Comic.objects.all()
		serializer = ComicSerializer(comics, many=True)
		return JSONResponse(serializer.data)
	elif request.method == 'POST':
		data = JSONParser().parse(request)
		serializer = ComicSerializer(data=data)
		if serializer.is_valid():
			serializer.save()
			return JSONResponse(serializer.data, status=201)
		return JSONResponse(serializer.errors, status=400)
	

@csrf_exempt
def comic_detail(request,pk, format=None):
	comic = get_object_or_404(Comic, id=pk)
	if request.method == 'GET':
		serializer = ComicSerializer(comic)
		return JSONResponse (serializer.data)
	elif request.method == 'PUT':
		data = JSONParser().parse(request)
		serializer = ComicSerializer(comic, data=Data)
		if serializer.is_valid():
			serializer.save()
			return JSONResponse(serializer.data)
		return JSONResponse(serializer.errors, status=400)
	elif request.method == 'DELETE':
		comic.delete()
		return HttpResponse(status=204)	
		
